//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Efficio.Net {

public class Disonnected : Event {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal Disonnected(global::System.IntPtr cPtr, bool cMemoryOwn) : base(EfficioRuntimePINVOKE.Disonnected_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Disonnected obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Disonnected() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EfficioRuntimePINVOKE.delete_Disonnected(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Disonnected(SensorInformation details) : this(EfficioRuntimePINVOKE.new_Disonnected(SensorInformation.getCPtr(details)), true) {
    if (EfficioRuntimePINVOKE.SWIGPendingException.Pending) throw EfficioRuntimePINVOKE.SWIGPendingException.Retrieve();
  }

  public SensorInformation SensorInformation {
    set {
      EfficioRuntimePINVOKE.Disonnected_SensorInformation_set(swigCPtr, SensorInformation.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = EfficioRuntimePINVOKE.Disonnected_SensorInformation_get(swigCPtr);
      SensorInformation ret = (cPtr == global::System.IntPtr.Zero) ? null : new SensorInformation(cPtr, false);
      return ret;
    } 
  }

  public override EventType GetEventType() {
    EventType ret = (EventType)EfficioRuntimePINVOKE.Disonnected_GetEventType(swigCPtr);
    return ret;
  }

}

}
