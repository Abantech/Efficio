//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Efficio.Net {

public class PinchDetector : SingleHandGestureDetector {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal PinchDetector(global::System.IntPtr cPtr, bool cMemoryOwn) : base(EfficioPINVOKE.PinchDetector_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(PinchDetector obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~PinchDetector() {
    Dispose();
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          EfficioPINVOKE.delete_PinchDetector(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public override GestureCollection Detect(SWIGTYPE_p_Leap__Hand hand) {
    GestureCollection ret = new GestureCollection(EfficioPINVOKE.PinchDetector_Detect(swigCPtr, SWIGTYPE_p_Leap__Hand.getCPtr(hand)), true);
    if (EfficioPINVOKE.SWIGPendingException.Pending) throw EfficioPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Enabled {
    set {
      EfficioPINVOKE.PinchDetector_Enabled_set(swigCPtr, value);
    } 
    get {
      bool ret = EfficioPINVOKE.PinchDetector_Enabled_get(swigCPtr);
      return ret;
    } 
  }

  public PinchDetector() : this(EfficioPINVOKE.new_PinchDetector(), true) {
  }

}

}
