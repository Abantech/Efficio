/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


	 /* Includes the header in the wrapper code */
 

	 /* Includes the header in the wrapper code */
	#include <memory>
	#include "Event.h"
	#include "Vector3.h"
	#include "Frame.h"
	#include "Enumerations.h"
	#include "EfficioFrame.h"
	#include "Engine.h"
	#include "Gesture.h"
	#include "DiscreteGesture.h"
	#include "Pinch.h"
	#include "Joint.h"
	#include "Vector3.h"
 

#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::const_reference std_vector_Sl_std_shared_ptr_Sl_Efficio_Models_Human_Hand_Sg__Sg__get(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Models_Human_Hand_Sg__Sg__set(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *self,int i,std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Events::Event > >::const_reference std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__get(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__set(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int i,std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::const_reference std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__get(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__set(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int i,std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Device > >::const_reference std_vector_Sl_std_shared_ptr_Sl_Efficio_Device_Sg__Sg__get(std::vector< std::shared_ptr< Efficio::Device > > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Device_Sg__Sg__set(std::vector< std::shared_ptr< Efficio::Device > > *self,int i,std::vector< std::shared_ptr< Efficio::Device > >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Vector3(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Efficio::Vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Efficio::Vector3 *)new Efficio::Vector3(arg1,arg2,arg3);
  *(Efficio::Vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Vector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Vector3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Vector3_1DistanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  SwigValueWrapper< Efficio::Vector3 > arg2 ;
  Efficio::Vector3 *argp2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Vector3 **)&jarg1; 
  argp2 = *(Efficio::Vector3 **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Vector3");
    return 0;
  }
  arg2 = *argp2; 
  result = (float)(arg1)->DistanceTo(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Vector3_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Vector3 **)&jarg1; 
  result = (float)(arg1)->X();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Vector3_1Y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Vector3 **)&jarg1; 
  result = (float)(arg1)->Y();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Vector3_1Z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Vector3 **)&jarg1; 
  result = (float)(arg1)->Z();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Joint_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< Efficio::Vector3 > arg1 ;
  JointType arg2 ;
  Efficio::Vector3 *argp1 ;
  JointType *argp2 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Efficio::Vector3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Vector3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(JointType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null JointType");
    return 0;
  }
  arg2 = *argp2; 
  result = (Efficio::Models::Body::Joint *)new Efficio::Models::Body::Joint(arg1,arg2);
  *(Efficio::Models::Body::Joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Joint_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  SwigValueWrapper< Efficio::Vector3 > arg1 ;
  JointType arg2 ;
  float arg3 ;
  Efficio::Vector3 *argp1 ;
  JointType *argp2 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  argp1 = *(Efficio::Vector3 **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Vector3");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(JointType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null JointType");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (Efficio::Models::Body::Joint *)new Efficio::Models::Body::Joint(arg1,arg2,arg3);
  *(Efficio::Models::Body::Joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Joint(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Joint_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Vector3 *arg2 = (Efficio::Vector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  arg2 = *(Efficio::Vector3 **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Joint_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  result = (Efficio::Vector3 *)& ((arg1)->Position);
  *(Efficio::Vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Joint_1Type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  JointType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  result = (JointType) ((arg1)->Type);
  *(JointType **)&jresult = new JointType((const JointType &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Joint_1Confidence_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  result = (float)(float) ((arg1)->Confidence);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Joint_1ProximalJoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg2 ;
  Efficio::Models::Body::Joint *argp2 ;
  SwigValueWrapper< std::vector< Efficio::Models::Body::Joint > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  argp2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ProximalJoints(arg2);
  *(std::vector< Efficio::Models::Body::Joint > **)&jresult = new std::vector< Efficio::Models::Body::Joint >((const std::vector< Efficio::Models::Body::Joint > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Joint_1DistalJoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg2 ;
  Efficio::Models::Body::Joint *argp2 ;
  SwigValueWrapper< std::vector< Efficio::Models::Body::Joint > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  argp2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->DistalJoints(arg2);
  *(std::vector< Efficio::Models::Body::Joint > **)&jresult = new std::vector< Efficio::Models::Body::Joint >((const std::vector< Efficio::Models::Body::Joint > &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Joint_1DistanceTo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg2 ;
  Efficio::Models::Body::Joint *argp2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Joint **)&jarg1; 
  argp2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg2 = *argp2; 
  result = (float)(arg1)->DistanceTo(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Finger(JNIEnv *jenv, jclass jcls, jlong jarg1, jboolean jarg2, jfloat jarg3, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::FingerType arg1 ;
  bool arg2 ;
  float arg3 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg4 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg5 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg6 ;
  SwigValueWrapper< Efficio::Models::Body::Joint > arg7 ;
  Efficio::Models::Body::FingerType *argp1 ;
  Efficio::Models::Body::Joint *argp4 ;
  Efficio::Models::Body::Joint *argp5 ;
  Efficio::Models::Body::Joint *argp6 ;
  Efficio::Models::Body::Joint *argp7 ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  (void)jarg7_;
  argp1 = *(Efficio::Models::Body::FingerType **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::FingerType");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  argp4 = *(Efficio::Models::Body::Joint **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(Efficio::Models::Body::Joint **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(Efficio::Models::Body::Joint **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg6 = *argp6; 
  argp7 = *(Efficio::Models::Body::Joint **)&jarg7; 
  if (!argp7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Joint");
    return 0;
  }
  arg7 = *argp7; 
  result = (Efficio::Models::Body::Finger *)new Efficio::Models::Body::Finger(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(Efficio::Models::Body::Finger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Finger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Finger_1Tip_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  arg2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (arg1) (arg1)->Tip = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Finger_1Tip_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->Tip);
  *(Efficio::Models::Body::Joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Finger_1DIP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  arg2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (arg1) (arg1)->DIP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Finger_1DIP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->DIP);
  *(Efficio::Models::Body::Joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Finger_1MCP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  arg2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (arg1) (arg1)->MCP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Finger_1MCP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->MCP);
  *(Efficio::Models::Body::Joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Finger_1PIP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  arg2 = *(Efficio::Models::Body::Joint **)&jarg2; 
  if (arg1) (arg1)->PIP = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Finger_1PIP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->PIP);
  *(Efficio::Models::Body::Joint **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Finger_1FingerType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  FingerType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (FingerType) ((arg1)->FingerType);
  *(FingerType **)&jresult = new FingerType((const FingerType &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_Finger_1IsExtended_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (bool)(bool) ((arg1)->IsExtended);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_Efficio_Java_EfficioJNI_Finger_1Length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Finger **)&jarg1; 
  result = (float)(float) ((arg1)->Length);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Hand(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  BodySide arg1 ;
  std::array< Efficio::Models::Body::Finger,5 > arg2 ;
  BodySide *argp1 ;
  std::array< Efficio::Models::Body::Finger,5 > *argp2 ;
  Efficio::Models::Body::Hand *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(BodySide **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null BodySide");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(std::array< Efficio::Models::Body::Finger,5 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::array< Efficio::Models::Body::Finger,5 >");
    return 0;
  }
  arg2 = *argp2; 
  result = (Efficio::Models::Body::Hand *)new Efficio::Models::Body::Hand(arg1,arg2);
  *(Efficio::Models::Body::Hand **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Hand(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Models::Body::Hand **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Hand_1Side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  BodySide result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Hand **)&jarg1; 
  result = (BodySide) ((arg1)->Side);
  *(BodySide **)&jresult = new BodySide((const BodySide &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Hand_1Fingers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 > arg2 ;
  std::array< Efficio::Models::Body::Finger,5 > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Hand **)&jarg1; 
  argp2 = *(std::array< Efficio::Models::Body::Finger,5 > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::array< Efficio::Models::Body::Finger,5 >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Fingers = arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Hand_1Fingers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Models::Body::Hand **)&jarg1; 
  result =  ((arg1)->Fingers);
  *(std::array< Efficio::Models::Body::Finger,5 > **)&jresult = new std::array< Efficio::Models::Body::Finger,5 >((const std::array< Efficio::Models::Body::Finger,5 > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Event(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Events::Event *arg1 = (Efficio::Events::Event *) 0 ;
  std::shared_ptr< Efficio::Events::Event > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Events::Event > **)&jarg1;
  arg1 = (Efficio::Events::Event *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Event_1GetEventType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::Events::Event *arg1 = (Efficio::Events::Event *) 0 ;
  std::shared_ptr< Efficio::Events::Event > *smartarg1 = 0 ;
  Efficio::Events::EventType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Events::Event > **)&jarg1;
  arg1 = (Efficio::Events::Event *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Events::EventType)(arg1)->GetEventType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Frame(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Efficio::Frame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Efficio::Frame *)new Efficio::Frame();
  
  *(std::shared_ptr<  Efficio::Frame > **)&jresult = result ? new std::shared_ptr<  Efficio::Frame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Frame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Frame > **)&jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Frame_1GetData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  std::map< Efficio::Data::DataType,std::vector< std::shared_ptr< Efficio::Data::Data > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Frame > **)&jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetData();
  *(std::map< Efficio::Data::DataType,std::vector< std::shared_ptr< Efficio::Data::Data > > > **)&jresult = new std::map< Efficio::Data::DataType,std::vector< std::shared_ptr< Efficio::Data::Data > > >((const std::map< Efficio::Data::DataType,std::vector< std::shared_ptr< Efficio::Data::Data > > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Frame_1GetDataOfType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  Efficio::Data::DataType arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  Efficio::Data::DataType *argp2 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Efficio::Data::Data > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Frame > **)&jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(Efficio::Data::DataType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Data::DataType");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->GetDataOfType(arg2);
  *(std::vector< std::shared_ptr< Efficio::Data::Data > > **)&jresult = new std::vector< std::shared_ptr< Efficio::Data::Data > >((const std::vector< std::shared_ptr< Efficio::Data::Data > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Frame_1AddData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< Efficio::Data::Data > > > arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Frame > **)&jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::vector< std::shared_ptr< Efficio::Data::Data > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector< std::shared_ptr< Efficio::Data::Data > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddData(arg2);
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Frame_1AddFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  Efficio::Frame arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  Efficio::Frame *argp2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Frame > **)&jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  
  argp2 = (*(std::shared_ptr<  Efficio::Frame > **)&jarg2) ? (*(std::shared_ptr<  Efficio::Frame > **)&jarg2)->get() : 0;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Frame");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddFrame(arg2);
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1events_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg2 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg2; 
  if (arg1) (arg1)->events = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1events_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)& ((arg1)->events);
  *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1ID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1ID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int) ((arg1)->ID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1EfficioFrame(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Efficio::EfficioFrame *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (Efficio::EfficioFrame *)new Efficio::EfficioFrame(arg1);
  
  *(std::shared_ptr<  Efficio::EfficioFrame > **)&jresult = result ? new std::shared_ptr<  Efficio::EfficioFrame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1EfficioFrame(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1GetEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetEvents();
  *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jresult = new std::vector< std::shared_ptr< Efficio::Events::Event > >((const std::vector< std::shared_ptr< Efficio::Events::Event > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1AddEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::EfficioFrame *arg1 = (Efficio::EfficioFrame *) 0 ;
  std::shared_ptr< Efficio::Events::Event > arg2 ;
  std::shared_ptr< Efficio::EfficioFrame > *smartarg1 = 0 ;
  std::shared_ptr< Efficio::Events::Event > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::EfficioFrame > **)&jarg1;
  arg1 = (Efficio::EfficioFrame *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(std::shared_ptr< Efficio::Events::Event > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->AddEvent(arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1DeviceManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Efficio::DeviceManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Efficio::DeviceManager *)new Efficio::DeviceManager();
  *(Efficio::DeviceManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1DeviceManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceManager_1AddDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  std::shared_ptr< Efficio::Device > arg2 ;
  std::shared_ptr< Efficio::Device > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  argp2 = *(std::shared_ptr< Efficio::Device > **)&jarg2; 
  if (argp2) arg2 = *argp2; 
  (arg1)->AddDevice(arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceManager_1GetDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  result = (arg1)->GetDevices();
  *(std::vector< std::shared_ptr< Efficio::Device > > **)&jresult = new std::vector< std::shared_ptr< Efficio::Device > >((const std::vector< std::shared_ptr< Efficio::Device > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceManager_1GetConnectedDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  result = (arg1)->GetConnectedDevices();
  *(std::vector< std::shared_ptr< Efficio::Device > > **)&jresult = new std::vector< std::shared_ptr< Efficio::Device > >((const std::vector< std::shared_ptr< Efficio::Device > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceManager_1GetDevicesWithStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  Efficio::DeviceStatus arg2 ;
  std::vector< std::shared_ptr< Efficio::Device > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  arg2 = (Efficio::DeviceStatus)jarg2; 
  result = (arg1)->GetDevicesWithStatus(arg2);
  *(std::vector< std::shared_ptr< Efficio::Device > > **)&jresult = new std::vector< std::shared_ptr< Efficio::Device > >((const std::vector< std::shared_ptr< Efficio::Device > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceManager_1GetDeviceByID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  std::string arg2 ;
  std::shared_ptr< Efficio::Device > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->GetDeviceByID(arg2);
  *(std::shared_ptr< Efficio::Device > **)&jresult = result ? new std::shared_ptr< Efficio::Device >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceManager_1RemoveDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Efficio::DeviceManager *arg1 = (Efficio::DeviceManager *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::DeviceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->RemoveDevice(arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Engine(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Efficio::Engine *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Efficio::Engine *)new Efficio::Engine();
  *(Efficio::Engine **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Engine(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Engine **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Engine_1Start(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Engine **)&jarg1; 
  (arg1)->Start();
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Engine_1GetFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  std::shared_ptr< Efficio::EfficioFrame > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Engine **)&jarg1; 
  result = (arg1)->GetFrame();
  *(std::shared_ptr< Efficio::EfficioFrame > **)&jresult = result ? new std::shared_ptr< Efficio::EfficioFrame >(result) : 0; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Engine_1GetFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::EfficioFrame > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Engine **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetFrame(arg2);
  *(std::shared_ptr< Efficio::EfficioFrame > **)&jresult = result ? new std::shared_ptr< Efficio::EfficioFrame >(result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Engine_1DeviceConfiguration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  Efficio::Configuration::DeviceConfiguration *arg2 = (Efficio::Configuration::DeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Engine **)&jarg1; 
  arg2 = *(Efficio::Configuration::DeviceConfiguration **)&jarg2; 
  if (arg1) (arg1)->DeviceConfiguration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Engine_1DeviceConfiguration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  Efficio::Configuration::DeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Engine **)&jarg1; 
  result = (Efficio::Configuration::DeviceConfiguration *)& ((arg1)->DeviceConfiguration);
  *(Efficio::Configuration::DeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1LeapConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Efficio::Configuration::LeapConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Efficio::Configuration::LeapConfiguration *)new Efficio::Configuration::LeapConfiguration();
  *(Efficio::Configuration::LeapConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1LeapConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Configuration::LeapConfiguration *arg1 = (Efficio::Configuration::LeapConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Configuration::LeapConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_LeapConfiguration_1Enabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Efficio::Configuration::LeapConfiguration *arg1 = (Efficio::Configuration::LeapConfiguration *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Configuration::LeapConfiguration **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_LeapConfiguration_1Enabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Efficio::Configuration::LeapConfiguration *arg1 = (Efficio::Configuration::LeapConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Configuration::LeapConfiguration **)&jarg1; 
  result = (bool) ((arg1)->Enabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1DeviceConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Efficio::Configuration::DeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Efficio::Configuration::DeviceConfiguration *)new Efficio::Configuration::DeviceConfiguration();
  *(Efficio::Configuration::DeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1DeviceConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Configuration::DeviceConfiguration *arg1 = (Efficio::Configuration::DeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Efficio::Configuration::DeviceConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceConfiguration_1LeapConfiguration_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Configuration::DeviceConfiguration *arg1 = (Efficio::Configuration::DeviceConfiguration *) 0 ;
  Efficio::Configuration::LeapConfiguration *arg2 = (Efficio::Configuration::LeapConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Efficio::Configuration::DeviceConfiguration **)&jarg1; 
  arg2 = *(Efficio::Configuration::LeapConfiguration **)&jarg2; 
  if (arg1) (arg1)->LeapConfiguration = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceConfiguration_1LeapConfiguration_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Configuration::DeviceConfiguration *arg1 = (Efficio::Configuration::DeviceConfiguration *) 0 ;
  Efficio::Configuration::LeapConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Efficio::Configuration::DeviceConfiguration **)&jarg1; 
  result = (Efficio::Configuration::LeapConfiguration *)& ((arg1)->LeapConfiguration);
  *(Efficio::Configuration::LeapConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Gesture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Gesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Gesture_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  Efficio::GestureType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Gesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::GestureType)(arg1)->GetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Gesture_1GetGestureState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  Efficio::GestureState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Gesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::GestureState)(arg1)->GetGestureState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Gesture_1GetStartTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Gesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetStartTime();
  *(std::time_t **)&jresult = new std::time_t((const std::time_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Gesture_1GetGestureDuration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  std::time_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Gesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetGestureDuration();
  *(std::time_t **)&jresult = new std::time_t((const std::time_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Gesture_1GetEventType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  Efficio::Events::EventType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Gesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Events::EventType)(arg1)->GetEventType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1DiscreteGesture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::InputRecognition::DiscreteGesture *arg1 = (Efficio::InputRecognition::DiscreteGesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::DiscreteGesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::DiscreteGesture *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_DiscreteGesture_1GetType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::InputRecognition::DiscreteGesture *arg1 = (Efficio::InputRecognition::DiscreteGesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *smartarg1 = 0 ;
  Efficio::GestureType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::DiscreteGesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::DiscreteGesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::GestureType)(arg1)->GetType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_DiscreteGesture_1GetGestureState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::InputRecognition::DiscreteGesture *arg1 = (Efficio::InputRecognition::DiscreteGesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *smartarg1 = 0 ;
  Efficio::GestureState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::DiscreteGesture > **)&jarg1;
  arg1 = (Efficio::InputRecognition::DiscreteGesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::GestureState)(arg1)->GetGestureState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1Pinch(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  Efficio::Models::Body::BodySide arg1 ;
  SwigValueWrapper< Efficio::Models::Body::Finger > arg2 ;
  SwigValueWrapper< Efficio::Models::Body::Finger > arg3 ;
  SwigValueWrapper< Efficio::Vector3 > arg4 ;
  Efficio::Models::Body::BodySide *argp1 ;
  Efficio::Models::Body::Finger *argp2 ;
  Efficio::Models::Body::Finger *argp3 ;
  Efficio::Vector3 *argp4 ;
  Efficio::InputRecognition::Human::Hands::Pinch *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  argp1 = *(Efficio::Models::Body::BodySide **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::BodySide");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(Efficio::Models::Body::Finger **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Finger");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(Efficio::Models::Body::Finger **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::Finger");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(Efficio::Vector3 **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Vector3");
    return 0;
  }
  arg4 = *argp4; 
  result = (Efficio::InputRecognition::Human::Hands::Pinch *)new Efficio::InputRecognition::Human::Hands::Pinch(arg1,arg2,arg3,arg4);
  
  *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jresult = result ? new std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Pinch(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  Efficio::Vector3 *arg2 = (Efficio::Vector3 *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(Efficio::Vector3 **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Vector3 *)& ((arg1)->Position);
  *(Efficio::Vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Finger1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  Efficio::Models::Body::Finger *arg2 = (Efficio::Models::Body::Finger *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(Efficio::Models::Body::Finger **)&jarg2; 
  if (arg1) (arg1)->Finger1 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Finger1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Models::Body::Finger *)& ((arg1)->Finger1);
  *(Efficio::Models::Body::Finger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Finger2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  Efficio::Models::Body::Finger *arg2 = (Efficio::Models::Body::Finger *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(Efficio::Models::Body::Finger **)&jarg2; 
  if (arg1) (arg1)->Finger2 = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Finger2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Models::Body::Finger *)& ((arg1)->Finger2);
  *(Efficio::Models::Body::Finger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1GetEventType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Events::EventType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Events::EventType)(arg1)->GetEventType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Side_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  Efficio::Models::Body::BodySide arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::BodySide *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = *(Efficio::Models::Body::BodySide **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Efficio::Models::Body::BodySide");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Side = arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1Side_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::InputRecognition::Human::Hands::Pinch *arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::BodySide result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
  arg1 = (Efficio::InputRecognition::Human::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->Side);
  *(Efficio::Models::Body::BodySide **)&jresult = new Efficio::Models::Body::BodySide((const Efficio::Models::Body::BodySide &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1Device(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Device_1ID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::string *arg2 = 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->ID = *arg2;
}


SWIGEXPORT jstring JNICALL Java_Efficio_Java_EfficioJNI_Device_1ID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (std::string *) & ((arg1)->ID);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Device_1Position_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  Efficio::Vector3 *arg2 = (Efficio::Vector3 *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(Efficio::Vector3 **)&jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Device_1Position_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  Efficio::Vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Vector3 *)& ((arg1)->Position);
  *(Efficio::Vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Device_1Direction_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  Efficio::Vector3 *arg2 = (Efficio::Vector3 *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = *(Efficio::Vector3 **)&jarg2; 
  if (arg1) (arg1)->Direction = *arg2;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Device_1Direction_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  Efficio::Vector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Vector3 *)& ((arg1)->Direction);
  *(Efficio::Vector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Device_1Enabled_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  bool arg2 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Enabled = arg2;
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_Device_1Enabled_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool) ((arg1)->Enabled);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_Device_1Connected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->Connected();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Device_1Status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  Efficio::DeviceStatus result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::DeviceStatus)(arg1)->Status();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_Efficio_Java_EfficioJNI_Device_1TrackingTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  Efficio::TrackingType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::TrackingType)(arg1)->TrackingTypes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Device_1Connect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Connect();
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_Device_1Disconnect(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  (arg1)->Disconnect();
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_Device_1HasFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (bool)(arg1)->HasFrame();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Device_1GetFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Efficio::Device *arg1 = (Efficio::Device *) 0 ;
  std::shared_ptr< Efficio::Device > *smartarg1 = 0 ;
  Efficio::Frame result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  
  smartarg1 = *(std::shared_ptr<  Efficio::Device > **)&jarg1;
  arg1 = (Efficio::Device *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetFrame();
  *(std::shared_ptr<  Efficio::Frame > **)&jresult = new std::shared_ptr<  Efficio::Frame >(new Efficio::Frame((Efficio::Frame &)result)); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1HandCollection_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *)new std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >();
  *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1HandCollection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::size_type arg1 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *)new std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >(arg1);
  *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  arg2 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_Models_Human_Hand_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_HandCollection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::shared_ptr< Efficio::Models::Human::Hand > >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Models_Human_Hand_Sg__Sg__set(arg1,arg2,(std::shared_ptr< Efficio::Models::Human::Hand > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1HandCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *arg1 = (std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Models::Human::Hand > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1EventCollection_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)new std::vector< std::shared_ptr< Efficio::Events::Event > >();
  *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1EventCollection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type arg1 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)new std::vector< std::shared_ptr< Efficio::Events::Event > >(arg1);
  *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Events::Event > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Events::Event > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< Efficio::Events::Event > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type **)&jresult = *result ? new std::shared_ptr< Efficio::Events::Event >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_EventCollection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< Efficio::Events::Event > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__set(arg1,arg2,(std::shared_ptr< Efficio::Events::Event > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1EventCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Events::Event > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1GestureCollection_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >();
  *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1GestureCollection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type arg1 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >(arg1);
  *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type **)&jresult = *result ? new std::shared_ptr< Efficio::InputRecognition::Gesture >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_GestureCollection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__set(arg1,arg2,(std::shared_ptr< Efficio::InputRecognition::Gesture > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1GestureCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1DeviceCollection_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::shared_ptr< Efficio::Device > > *)new std::vector< std::shared_ptr< Efficio::Device > >();
  *(std::vector< std::shared_ptr< Efficio::Device > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_new_1DeviceCollection_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::size_type arg1 ;
  std::vector< std::shared_ptr< Efficio::Device > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::shared_ptr< Efficio::Device > >::size_type)jarg1; 
  result = (std::vector< std::shared_ptr< Efficio::Device > > *)new std::vector< std::shared_ptr< Efficio::Device > >(arg1);
  *(std::vector< std::shared_ptr< Efficio::Device > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Device > > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Device > > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Device > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  result = (bool)((std::vector< std::shared_ptr< Efficio::Device > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::value_type *arg2 = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::value_type tempnull2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  arg2 = jarg2 ? *(std::vector< std::shared_ptr< Efficio::Device > >::value_type **)&jarg2 : &tempnull2; 
  (arg1)->push_back((std::vector< std::shared_ptr< Efficio::Device > >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Device > >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Device > >::value_type *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_Device_Sg__Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector< std::shared_ptr< Efficio::Device > >::value_type **)&jresult = *result ? new std::shared_ptr< Efficio::Device >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_DeviceCollection_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Device > >::value_type *arg3 = 0 ;
  std::vector< std::shared_ptr< Efficio::Device > >::value_type tempnull3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? *(std::vector< std::shared_ptr< Efficio::Device > >::value_type **)&jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Device_Sg__Sg__set(arg1,arg2,(std::shared_ptr< Efficio::Device > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_Efficio_Java_EfficioJNI_delete_1DeviceCollection(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::shared_ptr< Efficio::Device > > *arg1 = (std::vector< std::shared_ptr< Efficio::Device > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::shared_ptr< Efficio::Device > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_EfficioFrame_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< Efficio::EfficioFrame > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< Efficio::EfficioFrame > **)&jarg1;
    *(std::shared_ptr< Efficio::Frame > **)&baseptr = argp1 ? new std::shared_ptr< Efficio::Frame >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Gesture_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< Efficio::InputRecognition::Gesture > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< Efficio::InputRecognition::Gesture > **)&jarg1;
    *(std::shared_ptr< Efficio::Events::Event > **)&baseptr = argp1 ? new std::shared_ptr< Efficio::Events::Event >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_DiscreteGesture_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > **)&jarg1;
    *(std::shared_ptr< Efficio::InputRecognition::Gesture > **)&baseptr = argp1 ? new std::shared_ptr< Efficio::InputRecognition::Gesture >(*argp1) : 0;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_Efficio_Java_EfficioJNI_Pinch_1SWIGSmartPtrUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > *argp1;
    (void)jenv;
    (void)jcls;
    argp1 = *(std::shared_ptr< Efficio::InputRecognition::Human::Hands::Pinch > **)&jarg1;
    *(std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > **)&baseptr = argp1 ? new std::shared_ptr< Efficio::InputRecognition::DiscreteGesture >(*argp1) : 0;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

