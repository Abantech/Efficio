/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.10
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_EfficioRuntime(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_EfficioRuntime(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_EfficioRuntime(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else



 

	 /* Includes the header in the wrapper code */
	#include <memory>
	#include "Event.h"
	#include "Gesture.h"
	#include "Vector3.h"
	#include "Joint.h"
	#include "Finger.h"
	#include "BodySide.h"
	#include "Frame.h"
	#include "Engine.h"
	#include "DiscreteGesture.h"
	#include "Pinch.h"
	#include "Hand.h"
	#include "DataType.h"
 

#include <string>


#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <algorithm>
#include <array>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


struct SWIG_null_deleter {
  void operator() (void const *) const {
  }
};
#define SWIG_NO_NULL_DELETER_0 , SWIG_null_deleter()
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN std::vector< std::shared_ptr< Efficio::Events::Event > > *new_std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< Efficio::Events::Event > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< Efficio::Events::Event > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< Efficio::Events::Event > std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::shared_ptr< Efficio::Events::Event > const &std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__getitem(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__setitem(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,std::shared_ptr< Efficio::Events::Event > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__AddRange(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,std::vector< std::shared_ptr< Efficio::Events::Event > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Events::Event > > *std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__GetRange(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< Efficio::Events::Event > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Insert(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,std::shared_ptr< Efficio::Events::Event > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__InsertRange(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,std::vector< std::shared_ptr< Efficio::Events::Event > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Events::Event > > *std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Repeat(std::shared_ptr< Efficio::Events::Event > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< Efficio::Events::Event > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< Efficio::Events::Event > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__SetRange(std::vector< std::shared_ptr< Efficio::Events::Event > > *self,int index,std::vector< std::shared_ptr< Efficio::Events::Event > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *new_std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< Efficio::InputRecognition::Gesture > std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::shared_ptr< Efficio::InputRecognition::Gesture > const &std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__getitem(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__setitem(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,std::shared_ptr< Efficio::InputRecognition::Gesture > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__AddRange(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__GetRange(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Insert(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,std::shared_ptr< Efficio::InputRecognition::Gesture > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__InsertRange(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Repeat(std::shared_ptr< Efficio::InputRecognition::Gesture > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__SetRange(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *self,int index,std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Data::Data > > *new_std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg___SWIG_2(int capacity){
        std::vector< std::shared_ptr< Efficio::Data::Data > >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::shared_ptr< Efficio::Data::Data > >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::shared_ptr< Efficio::Data::Data > std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__getitemcopy(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::shared_ptr< Efficio::Data::Data > const &std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__getitem(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__setitem(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,std::shared_ptr< Efficio::Data::Data > const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__AddRange(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,std::vector< std::shared_ptr< Efficio::Data::Data > > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Data::Data > > *std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__GetRange(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::shared_ptr< Efficio::Data::Data > >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Insert(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,std::shared_ptr< Efficio::Data::Data > const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__InsertRange(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,std::vector< std::shared_ptr< Efficio::Data::Data > > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__RemoveAt(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__RemoveRange(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::shared_ptr< Efficio::Data::Data > > *std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Repeat(std::shared_ptr< Efficio::Data::Data > const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::shared_ptr< Efficio::Data::Data > >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Reverse__SWIG_0(std::vector< std::shared_ptr< Efficio::Data::Data > > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Reverse__SWIG_1(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__SetRange(std::vector< std::shared_ptr< Efficio::Data::Data > > *self,int index,std::vector< std::shared_ptr< Efficio::Data::Data > > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< Efficio::Models::Body::Joint > *new_std_vector_Sl_Efficio_Models_Body_Joint_Sg___SWIG_2(int capacity){
        std::vector< Efficio::Models::Body::Joint >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< Efficio::Models::Body::Joint >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN Efficio::Models::Body::Joint std_vector_Sl_Efficio_Models_Body_Joint_Sg__getitemcopy(std::vector< Efficio::Models::Body::Joint > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN Efficio::Models::Body::Joint const &std_vector_Sl_Efficio_Models_Body_Joint_Sg__getitem(std::vector< Efficio::Models::Body::Joint > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__setitem(std::vector< Efficio::Models::Body::Joint > *self,int index,Efficio::Models::Body::Joint const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__AddRange(std::vector< Efficio::Models::Body::Joint > *self,std::vector< Efficio::Models::Body::Joint > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< Efficio::Models::Body::Joint > *std_vector_Sl_Efficio_Models_Body_Joint_Sg__GetRange(std::vector< Efficio::Models::Body::Joint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< Efficio::Models::Body::Joint >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__Insert(std::vector< Efficio::Models::Body::Joint > *self,int index,Efficio::Models::Body::Joint const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__InsertRange(std::vector< Efficio::Models::Body::Joint > *self,int index,std::vector< Efficio::Models::Body::Joint > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__RemoveAt(std::vector< Efficio::Models::Body::Joint > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__RemoveRange(std::vector< Efficio::Models::Body::Joint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< Efficio::Models::Body::Joint > *std_vector_Sl_Efficio_Models_Body_Joint_Sg__Repeat(Efficio::Models::Body::Joint const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< Efficio::Models::Body::Joint >(count, value);
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__Reverse__SWIG_0(std::vector< Efficio::Models::Body::Joint > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__Reverse__SWIG_1(std::vector< Efficio::Models::Body::Joint > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_Efficio_Models_Body_Joint_Sg__SetRange(std::vector< Efficio::Models::Body::Joint > *self,int index,std::vector< Efficio::Models::Body::Joint > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN Efficio::Models::Body::Finger std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__getitemcopy(std::array< Efficio::Models::Body::Finger,5 > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::array< Efficio::Models::Body::Finger,5 >::const_reference std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__getitem(std::array< Efficio::Models::Body::Finger,5 > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__setitem(std::array< Efficio::Models::Body::Finger,5 > *self,int index,std::array< Efficio::Models::Body::Finger,5 >::const_reference val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__Reverse__SWIG_0(std::array< Efficio::Models::Body::Finger,5 > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__Reverse__SWIG_1(std::array< Efficio::Models::Body::Finger,5 > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Vector3__SWIG_0___() {
  void * jresult ;
  Efficio::Vector3 *result = 0 ;
  
  result = (Efficio::Vector3 *)new Efficio::Vector3();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Vector3__SWIG_1___(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  Efficio::Vector3 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (Efficio::Vector3 *)new Efficio::Vector3(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Vector3___(void * jarg1) {
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  
  arg1 = (Efficio::Vector3 *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Vector3_DistanceTo___(void * jarg1, void * jarg2) {
  float jresult ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  Efficio::Vector3 arg2 ;
  Efficio::Vector3 *argp2 ;
  float result;
  
  arg1 = (Efficio::Vector3 *)jarg1; 
  argp2 = (Efficio::Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Vector3", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float)(arg1)->DistanceTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Vector3_X___(void * jarg1) {
  float jresult ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  float result;
  
  arg1 = (Efficio::Vector3 *)jarg1; 
  result = (float)(arg1)->X();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Vector3_Y___(void * jarg1) {
  float jresult ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  float result;
  
  arg1 = (Efficio::Vector3 *)jarg1; 
  result = (float)(arg1)->Y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Vector3_Z___(void * jarg1) {
  float jresult ;
  Efficio::Vector3 *arg1 = (Efficio::Vector3 *) 0 ;
  float result;
  
  arg1 = (Efficio::Vector3 *)jarg1; 
  result = (float)(arg1)->Z();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Vector3_Midpoint___(void * jarg1, void * jarg2) {
  void * jresult ;
  Efficio::Vector3 arg1 ;
  Efficio::Vector3 arg2 ;
  Efficio::Vector3 *argp1 ;
  Efficio::Vector3 *argp2 ;
  Efficio::Vector3 result;
  
  argp1 = (Efficio::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (Efficio::Vector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Vector3", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = Efficio::Vector3::Midpoint(arg1,arg2);
  jresult = new Efficio::Vector3((const Efficio::Vector3 &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Data___(void * jarg1) {
  Efficio::Data::Data *arg1 = (Efficio::Data::Data *) 0 ;
  std::shared_ptr< Efficio::Data::Data > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Data::Data > *)jarg1;
  arg1 = (Efficio::Data::Data *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Data_GetDataType___(void * jarg1) {
  int jresult ;
  Efficio::Data::Data *arg1 = (Efficio::Data::Data *) 0 ;
  std::shared_ptr< Efficio::Data::Data > *smartarg1 = 0 ;
  Efficio::Data::DataType result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Data::Data > *)jarg1;
  arg1 = (Efficio::Data::Data *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Data::DataType)(arg1)->GetDataType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Joint__SWIG_0___() {
  void * jresult ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  result = (Efficio::Models::Body::Joint *)new Efficio::Models::Body::Joint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Joint__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  Efficio::Vector3 arg1 ;
  Efficio::Models::Body::JointType arg2 ;
  Efficio::Vector3 *argp1 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  argp1 = (Efficio::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (Efficio::Models::Body::JointType)jarg2; 
  result = (Efficio::Models::Body::Joint *)new Efficio::Models::Body::Joint(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Joint__SWIG_2___(void * jarg1, int jarg2, float jarg3) {
  void * jresult ;
  Efficio::Vector3 arg1 ;
  Efficio::Models::Body::JointType arg2 ;
  float arg3 ;
  Efficio::Vector3 *argp1 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  argp1 = (Efficio::Vector3 *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Vector3", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (Efficio::Models::Body::JointType)jarg2; 
  arg3 = (float)jarg3; 
  result = (Efficio::Models::Body::Joint *)new Efficio::Models::Body::Joint(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Joint___(void * jarg1) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Joint_Valid_set___(void * jarg1, unsigned int jarg2) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  bool arg2 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Valid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EfficiofNet_Joint_Valid_get___(void * jarg1) {
  unsigned int jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  bool result;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  result = (bool) ((arg1)->Valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Joint_Position_set___(void * jarg1, void * jarg2) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Vector3 *arg2 = (Efficio::Vector3 *) 0 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  arg2 = (Efficio::Vector3 *)jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Joint_Position_get___(void * jarg1) {
  void * jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Vector3 *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  result = (Efficio::Vector3 *)& ((arg1)->Position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Joint_Type_set___(void * jarg1, int jarg2) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Models::Body::JointType arg2 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  arg2 = (Efficio::Models::Body::JointType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Joint_Type_get___(void * jarg1) {
  int jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Models::Body::JointType result;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  result = (Efficio::Models::Body::JointType) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Joint_Confidence_set___(void * jarg1, float jarg2) {
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  float arg2 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Confidence = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Joint_Confidence_get___(void * jarg1) {
  float jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  float result;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  result = (float) ((arg1)->Confidence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Joint_ProximalJoints___(void * jarg1, void * jarg2) {
  void * jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Models::Body::Joint arg2 ;
  Efficio::Models::Body::Joint *argp2 ;
  std::vector< Efficio::Models::Body::Joint > result;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  argp2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->ProximalJoints(arg2);
  jresult = new std::vector< Efficio::Models::Body::Joint >((const std::vector< Efficio::Models::Body::Joint > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Joint_DistalJoints___(void * jarg1, void * jarg2) {
  void * jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Models::Body::Joint arg2 ;
  Efficio::Models::Body::Joint *argp2 ;
  std::vector< Efficio::Models::Body::Joint > result;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  argp2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->DistalJoints(arg2);
  jresult = new std::vector< Efficio::Models::Body::Joint >((const std::vector< Efficio::Models::Body::Joint > &)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Joint_DistanceTo___(void * jarg1, void * jarg2) {
  float jresult ;
  Efficio::Models::Body::Joint *arg1 = (Efficio::Models::Body::Joint *) 0 ;
  Efficio::Models::Body::Joint arg2 ;
  Efficio::Models::Body::Joint *argp2 ;
  float result;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1; 
  argp2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (float)(arg1)->DistanceTo(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Finger__SWIG_0___() {
  void * jresult ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  result = (Efficio::Models::Body::Finger *)new Efficio::Models::Body::Finger();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Finger__SWIG_1___(int jarg1, unsigned int jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  void * jresult ;
  Efficio::Models::Body::FingerType arg1 ;
  bool arg2 ;
  float arg3 ;
  Efficio::Models::Body::Joint arg4 ;
  Efficio::Models::Body::Joint arg5 ;
  Efficio::Models::Body::Joint arg6 ;
  Efficio::Models::Body::Joint arg7 ;
  Efficio::Models::Body::Joint *argp4 ;
  Efficio::Models::Body::Joint *argp5 ;
  Efficio::Models::Body::Joint *argp6 ;
  Efficio::Models::Body::Joint *argp7 ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  arg1 = (Efficio::Models::Body::FingerType)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (float)jarg3; 
  argp4 = (Efficio::Models::Body::Joint *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg4 = *argp4; 
  argp5 = (Efficio::Models::Body::Joint *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg5 = *argp5; 
  argp6 = (Efficio::Models::Body::Joint *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg6 = *argp6; 
  argp7 = (Efficio::Models::Body::Joint *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Joint", 0);
    return 0;
  }
  arg7 = *argp7; 
  result = (Efficio::Models::Body::Finger *)new Efficio::Models::Body::Finger(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Finger___(void * jarg1) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_Tip_set___(void * jarg1, void * jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (arg1) (arg1)->Tip = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Finger_Tip_get___(void * jarg1) {
  void * jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->Tip);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_DIP_set___(void * jarg1, void * jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (arg1) (arg1)->DIP = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Finger_DIP_get___(void * jarg1) {
  void * jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->DIP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_MCP_set___(void * jarg1, void * jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (arg1) (arg1)->MCP = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Finger_MCP_get___(void * jarg1) {
  void * jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->MCP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_PIP_set___(void * jarg1, void * jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *arg2 = (Efficio::Models::Body::Joint *) 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = (Efficio::Models::Body::Joint *)jarg2; 
  if (arg1) (arg1)->PIP = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Finger_PIP_get___(void * jarg1) {
  void * jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (Efficio::Models::Body::Joint *)& ((arg1)->PIP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_Valid_set___(void * jarg1, unsigned int jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  bool arg2 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Valid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EfficiofNet_Finger_Valid_get___(void * jarg1) {
  unsigned int jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  bool result;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (bool) ((arg1)->Valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_FingerType_set___(void * jarg1, int jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::FingerType arg2 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = (Efficio::Models::Body::FingerType)jarg2; 
  if (arg1) (arg1)->FingerType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Finger_FingerType_get___(void * jarg1) {
  int jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  Efficio::Models::Body::FingerType result;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (Efficio::Models::Body::FingerType) ((arg1)->FingerType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_IsExtended_set___(void * jarg1, unsigned int jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  bool arg2 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsExtended = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EfficiofNet_Finger_IsExtended_get___(void * jarg1) {
  unsigned int jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  bool result;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (bool) ((arg1)->IsExtended);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Finger_Length_set___(void * jarg1, float jarg2) {
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  float arg2 ;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Finger_Length_get___(void * jarg1) {
  float jresult ;
  Efficio::Models::Body::Finger *arg1 = (Efficio::Models::Body::Finger *) 0 ;
  float result;
  
  arg1 = (Efficio::Models::Body::Finger *)jarg1; 
  result = (float) ((arg1)->Length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Hand__SWIG_0___(int jarg1, void * jarg2, float jarg3) {
  void * jresult ;
  Efficio::Models::Body::BodySide arg1 ;
  std::array< Efficio::Models::Body::Finger,5 > arg2 ;
  float arg3 ;
  std::array< Efficio::Models::Body::Finger,5 > *argp2 ;
  Efficio::Models::Body::Hand *result = 0 ;
  
  arg1 = (Efficio::Models::Body::BodySide)jarg1; 
  argp2 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::array< Efficio::Models::Body::Finger,5 >", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (float)jarg3; 
  result = (Efficio::Models::Body::Hand *)new Efficio::Models::Body::Hand(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Hand__SWIG_1___(int jarg1, void * jarg2) {
  void * jresult ;
  Efficio::Models::Body::BodySide arg1 ;
  std::array< Efficio::Models::Body::Finger,5 > arg2 ;
  std::array< Efficio::Models::Body::Finger,5 > *argp2 ;
  Efficio::Models::Body::Hand *result = 0 ;
  
  arg1 = (Efficio::Models::Body::BodySide)jarg1; 
  argp2 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::array< Efficio::Models::Body::Finger,5 >", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (Efficio::Models::Body::Hand *)new Efficio::Models::Body::Hand(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Hand___(void * jarg1) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Hand_Side_set___(void * jarg1, int jarg2) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  Efficio::Models::Body::BodySide arg2 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  arg2 = (Efficio::Models::Body::BodySide)jarg2; 
  if (arg1) (arg1)->Side = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Hand_Side_get___(void * jarg1) {
  int jresult ;
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  Efficio::Models::Body::BodySide result;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  result = (Efficio::Models::Body::BodySide) ((arg1)->Side);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Hand_Confidence_set___(void * jarg1, float jarg2) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  float arg2 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Confidence = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EfficiofNet_Hand_Confidence_get___(void * jarg1) {
  float jresult ;
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  float result;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  result = (float) ((arg1)->Confidence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Hand_Source_set___(void * jarg1, char * jarg2) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Source = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EfficiofNet_Hand_Source_get___(void * jarg1) {
  char * jresult ;
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  result = (std::string *) & ((arg1)->Source);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Hand_Fingers_set___(void * jarg1, void * jarg2) {
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 > *arg2 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  arg2 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg2; 
  if (arg1) (arg1)->Fingers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Hand_Fingers_get___(void * jarg1) {
  void * jresult ;
  Efficio::Models::Body::Hand *arg1 = (Efficio::Models::Body::Hand *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 > *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Hand *)jarg1; 
  result = (std::array< Efficio::Models::Body::Finger,5 > *)& ((arg1)->Fingers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Event___(void * jarg1) {
  Efficio::Events::Event *arg1 = (Efficio::Events::Event *) 0 ;
  std::shared_ptr< Efficio::Events::Event > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Events::Event > *)jarg1;
  arg1 = (Efficio::Events::Event *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Event_Time_set___(void * jarg1, void * jarg2) {
  Efficio::Events::Event *arg1 = (Efficio::Events::Event *) 0 ;
  time_t arg2 ;
  std::shared_ptr< Efficio::Events::Event > *smartarg1 = 0 ;
  time_t *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Events::Event > *)jarg1;
  arg1 = (Efficio::Events::Event *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (time_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null time_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Time = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Event_Time_get___(void * jarg1) {
  void * jresult ;
  Efficio::Events::Event *arg1 = (Efficio::Events::Event *) 0 ;
  std::shared_ptr< Efficio::Events::Event > *smartarg1 = 0 ;
  time_t result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Events::Event > *)jarg1;
  arg1 = (Efficio::Events::Event *)(smartarg1 ? smartarg1->get() : 0); 
  result =  ((arg1)->Time);
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Event_GetEventType___(void * jarg1) {
  int jresult ;
  Efficio::Events::Event *arg1 = (Efficio::Events::Event *) 0 ;
  std::shared_ptr< Efficio::Events::Event > *smartarg1 = 0 ;
  Efficio::Events::EventType result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Events::Event > *)jarg1;
  arg1 = (Efficio::Events::Event *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Events::EventType)(arg1)->GetEventType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Frame__SWIG_0___(int jarg1) {
  void * jresult ;
  int arg1 ;
  Efficio::Frame *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (Efficio::Frame *)new Efficio::Frame(arg1);
  
  jresult = result ? new std::shared_ptr<  Efficio::Frame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Frame__SWIG_1___() {
  void * jresult ;
  Efficio::Frame *result = 0 ;
  
  result = (Efficio::Frame *)new Efficio::Frame();
  
  jresult = result ? new std::shared_ptr<  Efficio::Frame >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Frame___(void * jarg1) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Frame_GetData___(void * jarg1) {
  void * jresult ;
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetData();
  jresult = new std::vector< std::shared_ptr< Efficio::Data::Data > >((const std::vector< std::shared_ptr< Efficio::Data::Data > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Frame_AddData___(void * jarg1, void * jarg2) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *argp2 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  argp2 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::vector< std::shared_ptr< Efficio::Data::Data > >", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Frame_AddFrame___(void * jarg1, void * jarg2) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  Efficio::Frame arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  Efficio::Frame *argp2 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  
  argp2 = ((std::shared_ptr<  Efficio::Frame > *)jarg2) ? ((std::shared_ptr<  Efficio::Frame > *)jarg2)->get() : 0;
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Frame", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AddFrame(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Frame_GetEvents___(void * jarg1) {
  void * jresult ;
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetEvents();
  jresult = new std::vector< std::shared_ptr< Efficio::Events::Event > >((const std::vector< std::shared_ptr< Efficio::Events::Event > > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Frame_AddEvent___(void * jarg1, void * jarg2) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Events::Event > arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  if (jarg2) arg2 = *(std::shared_ptr< Efficio::Events::Event > *)jarg2; 
  (arg1)->AddEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Frame_ID_set___(void * jarg1, int jarg2) {
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Frame_ID_get___(void * jarg1) {
  int jresult ;
  Efficio::Frame *arg1 = (Efficio::Frame *) 0 ;
  std::shared_ptr< Efficio::Frame > *smartarg1 = 0 ;
  int result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::Frame > *)jarg1;
  arg1 = (Efficio::Frame *)(smartarg1 ? smartarg1->get() : 0); 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Engine___() {
  void * jresult ;
  Efficio::Engine *result = 0 ;
  
  result = (Efficio::Engine *)new Efficio::Engine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Engine___(void * jarg1) {
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  
  arg1 = (Efficio::Engine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Engine_Start___(void * jarg1) {
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  
  arg1 = (Efficio::Engine *)jarg1; 
  (arg1)->Start();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Engine_GetFrame__SWIG_0___(void * jarg1) {
  void * jresult ;
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  std::shared_ptr< Efficio::Frame > result;
  
  arg1 = (Efficio::Engine *)jarg1; 
  result = (arg1)->GetFrame();
  jresult = result ? new std::shared_ptr< Efficio::Frame >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Engine_GetFrame__SWIG_1___(void * jarg1, int jarg2) {
  void * jresult ;
  Efficio::Engine *arg1 = (Efficio::Engine *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Frame > result;
  
  arg1 = (Efficio::Engine *)jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->GetFrame(arg2);
  jresult = result ? new std::shared_ptr< Efficio::Frame >(result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Gesture___(void * jarg1) {
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Gesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Gesture_GetType___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  Efficio::InputRecognition::GestureType result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Gesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::InputRecognition::GestureType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Gesture_GetGestureState___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  Efficio::InputRecognition::GestureState result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Gesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::InputRecognition::GestureState)(arg1)->GetGestureState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Gesture_GetStartTime___(void * jarg1) {
  void * jresult ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  std::time_t result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Gesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetStartTime();
  jresult = new std::time_t((const std::time_t &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Gesture_GetGestureDuration___(void * jarg1) {
  void * jresult ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  std::time_t result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Gesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (arg1)->GetGestureDuration();
  jresult = new std::time_t((const std::time_t &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Gesture_GetEventType___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::Gesture *arg1 = (Efficio::InputRecognition::Gesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *smartarg1 = 0 ;
  Efficio::Events::EventType result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Gesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::Gesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Events::EventType)(arg1)->GetEventType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_DiscreteGesture___(void * jarg1) {
  Efficio::InputRecognition::DiscreteGesture *arg1 = (Efficio::InputRecognition::DiscreteGesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::DiscreteGesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::DiscreteGesture *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_DiscreteGesture_GetType___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::DiscreteGesture *arg1 = (Efficio::InputRecognition::DiscreteGesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *smartarg1 = 0 ;
  Efficio::InputRecognition::GestureType result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::DiscreteGesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::DiscreteGesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::InputRecognition::GestureType)(arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_DiscreteGesture_GetGestureState___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::DiscreteGesture *arg1 = (Efficio::InputRecognition::DiscreteGesture *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *smartarg1 = 0 ;
  Efficio::InputRecognition::GestureState result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::DiscreteGesture > *)jarg1;
  arg1 = (Efficio::InputRecognition::DiscreteGesture *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::InputRecognition::GestureState)(arg1)->GetGestureState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_Pinch___(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  Efficio::Models::Body::BodySide arg1 ;
  Efficio::Models::Body::Finger arg2 ;
  Efficio::Models::Body::Finger arg3 ;
  Efficio::Models::Body::Finger *argp2 ;
  Efficio::Models::Body::Finger *argp3 ;
  Efficio::InputRecognition::Body::Hands::Pinch *result = 0 ;
  
  arg1 = (Efficio::Models::Body::BodySide)jarg1; 
  argp2 = (Efficio::Models::Body::Finger *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Finger", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (Efficio::Models::Body::Finger *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null Efficio::Models::Body::Finger", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (Efficio::InputRecognition::Body::Hands::Pinch *)new Efficio::InputRecognition::Body::Hands::Pinch(arg1,arg2,arg3);
  
  jresult = result ? new std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch >(result SWIG_NO_NULL_DELETER_1) : 0;
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_Pinch___(void * jarg1) {
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  (void)arg1; delete smartarg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Pinch_Position_set___(void * jarg1, void * jarg2) {
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  Efficio::Vector3 *arg2 = (Efficio::Vector3 *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Efficio::Vector3 *)jarg2; 
  if (arg1) (arg1)->Position = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Pinch_Position_get___(void * jarg1) {
  void * jresult ;
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Vector3 *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Vector3 *)& ((arg1)->Position);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Pinch_Finger1_set___(void * jarg1, void * jarg2) {
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  Efficio::Models::Body::Finger *arg2 = (Efficio::Models::Body::Finger *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Efficio::Models::Body::Finger *)jarg2; 
  if (arg1) (arg1)->Finger1 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Pinch_Finger1_get___(void * jarg1) {
  void * jresult ;
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Models::Body::Finger *)& ((arg1)->Finger1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Pinch_Finger2_set___(void * jarg1, void * jarg2) {
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  Efficio::Models::Body::Finger *arg2 = (Efficio::Models::Body::Finger *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Efficio::Models::Body::Finger *)jarg2; 
  if (arg1) (arg1)->Finger2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_Pinch_Finger2_get___(void * jarg1) {
  void * jresult ;
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::Finger *result = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Models::Body::Finger *)& ((arg1)->Finger2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Pinch_GetEventType___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Events::EventType result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Events::EventType)(arg1)->GetEventType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_Pinch_Side_set___(void * jarg1, int jarg2) {
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  Efficio::Models::Body::BodySide arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  arg2 = (Efficio::Models::Body::BodySide)jarg2; 
  if (arg1) (arg1)->Side = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EfficiofNet_Pinch_Side_get___(void * jarg1) {
  int jresult ;
  Efficio::InputRecognition::Body::Hands::Pinch *arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *smartarg1 = 0 ;
  Efficio::Models::Body::BodySide result;
  
  
  smartarg1 = (std::shared_ptr<  Efficio::InputRecognition::Body::Hands::Pinch > *)jarg1;
  arg1 = (Efficio::InputRecognition::Body::Hands::Pinch *)(smartarg1 ? smartarg1->get() : 0); 
  result = (Efficio::Models::Body::BodySide) ((arg1)->Side);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_Clear___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_Add___(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::shared_ptr< Efficio::Events::Event > *arg2 = 0 ;
  std::shared_ptr< Efficio::Events::Event > tempnull2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< Efficio::Events::Event > *)jarg2 : &tempnull2; 
  (arg1)->push_back((std::shared_ptr< Efficio::Events::Event > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_EventCollection_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Events::Event > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_EventCollection_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Events::Event > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Events::Event > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_EventCollection__SWIG_0___() {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)new std::vector< std::shared_ptr< Efficio::Events::Event > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_EventCollection__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Events::Event > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)new std::vector< std::shared_ptr< Efficio::Events::Event > >((std::vector< std::shared_ptr< Efficio::Events::Event > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_EventCollection__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)new_std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_EventCollection_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Events::Event > result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr< Efficio::Events::Event >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_EventCollection_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Events::Event > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::shared_ptr< Efficio::Events::Event > *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result ? new std::shared_ptr< Efficio::Events::Event >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Events::Event > *arg3 = 0 ;
  std::shared_ptr< Efficio::Events::Event > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< Efficio::Events::Event > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< Efficio::Events::Event > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Events::Event > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< Efficio::Events::Event > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_EventCollection_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Events::Event > *arg3 = 0 ;
  std::shared_ptr< Efficio::Events::Event > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< Efficio::Events::Event > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< Efficio::Events::Event > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Events::Event > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< Efficio::Events::Event > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_EventCollection_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< Efficio::Events::Event > *arg1 = 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Events::Event > tempnull1 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< Efficio::Events::Event > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Repeat((std::shared_ptr< Efficio::Events::Event > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_EventCollection_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Events::Event > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Events_Event_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< Efficio::Events::Event > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_EventCollection___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::Events::Event > > *arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Events::Event > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_Clear___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_Add___(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *arg2 = 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > tempnull2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< Efficio::InputRecognition::Gesture > *)jarg2 : &tempnull2; 
  (arg1)->push_back((std::shared_ptr< Efficio::InputRecognition::Gesture > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_GestureCollection__SWIG_0___() {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_GestureCollection__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)new std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > >((std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_GestureCollection__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)new_std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr< Efficio::InputRecognition::Gesture >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::shared_ptr< Efficio::InputRecognition::Gesture > *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result ? new std::shared_ptr< Efficio::InputRecognition::Gesture >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *arg3 = 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< Efficio::InputRecognition::Gesture > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< Efficio::InputRecognition::Gesture > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *arg3 = 0 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< Efficio::InputRecognition::Gesture > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< Efficio::InputRecognition::Gesture > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > *arg1 = 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::InputRecognition::Gesture > tempnull1 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< Efficio::InputRecognition::Gesture > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Repeat((std::shared_ptr< Efficio::InputRecognition::Gesture > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_GestureCollection_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_InputRecognition_Gesture_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_GestureCollection___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::InputRecognition::Gesture > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_Clear___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_Add___(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  std::shared_ptr< Efficio::Data::Data > *arg2 = 0 ;
  std::shared_ptr< Efficio::Data::Data > tempnull2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = jarg2 ? (std::shared_ptr< Efficio::Data::Data > *)jarg2 : &tempnull2; 
  (arg1)->push_back((std::shared_ptr< Efficio::Data::Data > const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_DataCollection_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Data::Data > > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_DataCollection_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > >::size_type result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  result = ((std::vector< std::shared_ptr< Efficio::Data::Data > > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > >::size_type arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Data::Data > >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_DataCollection__SWIG_0___() {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *result = 0 ;
  
  result = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)new std::vector< std::shared_ptr< Efficio::Data::Data > >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_DataCollection__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Data::Data > > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)new std::vector< std::shared_ptr< Efficio::Data::Data > >((std::vector< std::shared_ptr< Efficio::Data::Data > > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_DataCollection__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)new_std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_DataCollection_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Data::Data > result;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result ? new std::shared_ptr< Efficio::Data::Data >(result) : 0; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_DataCollection_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Data::Data > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::shared_ptr< Efficio::Data::Data > *) &std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result ? new std::shared_ptr< Efficio::Data::Data >(*result) : 0; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Data::Data > *arg3 = 0 ;
  std::shared_ptr< Efficio::Data::Data > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< Efficio::Data::Data > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__setitem(arg1,arg2,(std::shared_ptr< Efficio::Data::Data > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg2 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Data::Data > > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__AddRange(arg1,(std::vector< std::shared_ptr< Efficio::Data::Data > > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_DataCollection_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *result = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Data::Data > *arg3 = 0 ;
  std::shared_ptr< Efficio::Data::Data > tempnull3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? (std::shared_ptr< Efficio::Data::Data > *)jarg3 : &tempnull3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Insert(arg1,arg2,(std::shared_ptr< Efficio::Data::Data > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Data::Data > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__InsertRange(arg1,arg2,(std::vector< std::shared_ptr< Efficio::Data::Data > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_DataCollection_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  std::shared_ptr< Efficio::Data::Data > *arg1 = 0 ;
  int arg2 ;
  std::shared_ptr< Efficio::Data::Data > tempnull1 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *result = 0 ;
  
  arg1 = jarg1 ? (std::shared_ptr< Efficio::Data::Data > *)jarg1 : &tempnull1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Repeat((std::shared_ptr< Efficio::Data::Data > const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_DataCollection_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  int arg2 ;
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg3 = 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::shared_ptr< Efficio::Data::Data > > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_shared_ptr_Sl_Efficio_Data_Data_Sg__Sg__SetRange(arg1,arg2,(std::vector< std::shared_ptr< Efficio::Data::Data > > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_DataCollection___(void * jarg1) {
  std::vector< std::shared_ptr< Efficio::Data::Data > > *arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *) 0 ;
  
  arg1 = (std::vector< std::shared_ptr< Efficio::Data::Data > > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_Clear___(void * jarg1) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_Add___(void * jarg1, void * jarg2) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  Efficio::Models::Body::Joint *arg2 = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (Efficio::Models::Body::Joint *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Efficio::Models::Body::Joint const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((Efficio::Models::Body::Joint const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_JointCollection_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  std::vector< Efficio::Models::Body::Joint >::size_type result;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  result = ((std::vector< Efficio::Models::Body::Joint > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_JointCollection_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  std::vector< Efficio::Models::Body::Joint >::size_type result;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  result = ((std::vector< Efficio::Models::Body::Joint > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  std::vector< Efficio::Models::Body::Joint >::size_type arg2 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (std::vector< Efficio::Models::Body::Joint >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_JointCollection__SWIG_0___() {
  void * jresult ;
  std::vector< Efficio::Models::Body::Joint > *result = 0 ;
  
  result = (std::vector< Efficio::Models::Body::Joint > *)new std::vector< Efficio::Models::Body::Joint >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_JointCollection__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< Efficio::Models::Body::Joint > *arg1 = 0 ;
  std::vector< Efficio::Models::Body::Joint > *result = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Efficio::Models::Body::Joint > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< Efficio::Models::Body::Joint > *)new std::vector< Efficio::Models::Body::Joint >((std::vector< Efficio::Models::Body::Joint > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_JointCollection__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< Efficio::Models::Body::Joint > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< Efficio::Models::Body::Joint > *)new_std_vector_Sl_Efficio_Models_Body_Joint_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_JointCollection_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  Efficio::Models::Body::Joint result;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_Efficio_Models_Body_Joint_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Efficio::Models::Body::Joint((const Efficio::Models::Body::Joint &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_JointCollection_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  Efficio::Models::Body::Joint *result = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (Efficio::Models::Body::Joint *) &std_vector_Sl_Efficio_Models_Body_Joint_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  Efficio::Models::Body::Joint *arg3 = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Efficio::Models::Body::Joint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Efficio::Models::Body::Joint const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__setitem(arg1,arg2,(Efficio::Models::Body::Joint const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_AddRange___(void * jarg1, void * jarg2) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  std::vector< Efficio::Models::Body::Joint > *arg2 = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (std::vector< Efficio::Models::Body::Joint > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Efficio::Models::Body::Joint > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_Efficio_Models_Body_Joint_Sg__AddRange(arg1,(std::vector< Efficio::Models::Body::Joint > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_JointCollection_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< Efficio::Models::Body::Joint > *result = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< Efficio::Models::Body::Joint > *)std_vector_Sl_Efficio_Models_Body_Joint_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  Efficio::Models::Body::Joint *arg3 = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (Efficio::Models::Body::Joint *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Efficio::Models::Body::Joint const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__Insert(arg1,arg2,(Efficio::Models::Body::Joint const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  std::vector< Efficio::Models::Body::Joint > *arg3 = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Efficio::Models::Body::Joint > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Efficio::Models::Body::Joint > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__InsertRange(arg1,arg2,(std::vector< Efficio::Models::Body::Joint > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_JointCollection_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  Efficio::Models::Body::Joint *arg1 = 0 ;
  int arg2 ;
  std::vector< Efficio::Models::Body::Joint > *result = 0 ;
  
  arg1 = (Efficio::Models::Body::Joint *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Efficio::Models::Body::Joint const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< Efficio::Models::Body::Joint > *)std_vector_Sl_Efficio_Models_Body_Joint_Sg__Repeat((Efficio::Models::Body::Joint const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_Reverse__SWIG_0___(void * jarg1) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  std_vector_Sl_Efficio_Models_Body_Joint_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_JointCollection_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  int arg2 ;
  std::vector< Efficio::Models::Body::Joint > *arg3 = 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< Efficio::Models::Body::Joint > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< Efficio::Models::Body::Joint > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_Efficio_Models_Body_Joint_Sg__SetRange(arg1,arg2,(std::vector< Efficio::Models::Body::Joint > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_JointCollection___(void * jarg1) {
  std::vector< Efficio::Models::Body::Joint > *arg1 = (std::vector< Efficio::Models::Body::Joint > *) 0 ;
  
  arg1 = (std::vector< Efficio::Models::Body::Joint > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_FingerCollection__SWIG_0___() {
  void * jresult ;
  std::array< Efficio::Models::Body::Finger,5 > *result = 0 ;
  
  result = (std::array< Efficio::Models::Body::Finger,5 > *)new std::array< Efficio::Models::Body::Finger,5 >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_new_FingerCollection__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = 0 ;
  std::array< Efficio::Models::Body::Finger,5 > *result = 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Efficio::Models::Body::Finger,5 > const & type is null", 0);
    return 0;
  } 
  result = (std::array< Efficio::Models::Body::Finger,5 > *)new std::array< Efficio::Models::Body::Finger,5 >((std::array< Efficio::Models::Body::Finger,5 > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_size___(void * jarg1) {
  unsigned long jresult ;
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 >::size_type result;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  result = ((std::array< Efficio::Models::Body::Finger,5 > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_empty___(void * jarg1) {
  unsigned int jresult ;
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  bool result;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  result = (bool)((std::array< Efficio::Models::Body::Finger,5 > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_Fill___(void * jarg1, void * jarg2) {
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 >::value_type *arg2 = 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  arg2 = (std::array< Efficio::Models::Body::Finger,5 >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Efficio::Models::Body::Finger,5 >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->fill((std::array< Efficio::Models::Body::Finger,5 >::value_type const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_Swap___(void * jarg1, void * jarg2) {
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  std::array< Efficio::Models::Body::Finger,5 > *arg2 = 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  arg2 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Efficio::Models::Body::Finger,5 > & type is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  int arg2 ;
  Efficio::Models::Body::Finger result;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new Efficio::Models::Body::Finger((const Efficio::Models::Body::Finger &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  int arg2 ;
  std::array< Efficio::Models::Body::Finger,5 >::value_type *result = 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::array< Efficio::Models::Body::Finger,5 >::value_type *) &std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  int arg2 ;
  std::array< Efficio::Models::Body::Finger,5 >::value_type *arg3 = 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::array< Efficio::Models::Body::Finger,5 >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::array< Efficio::Models::Body::Finger,5 >::const_reference type is null", 0);
    return ;
  } 
  try {
    std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__setitem(arg1,arg2,(Efficio::Models::Body::Finger const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_Reverse__SWIG_0___(void * jarg1) {
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_FingerCollection_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_array_Sl_Efficio_Models_Body_Finger_Sc_5_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_EfficiofNet_delete_FingerCollection___(void * jarg1) {
  std::array< Efficio::Models::Body::Finger,5 > *arg1 = (std::array< Efficio::Models::Body::Finger,5 > *) 0 ;
  
  arg1 = (std::array< Efficio::Models::Body::Finger,5 > *)jarg1; 
  delete arg1;
}


SWIGEXPORT std::shared_ptr< Efficio::Events::Event > * SWIGSTDCALL CSharp_EfficiofNet_Gesture_SWIGSmartPtrUpcast___(std::shared_ptr< Efficio::InputRecognition::Gesture > *jarg1) {
    return jarg1 ? new std::shared_ptr< Efficio::Events::Event >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< Efficio::InputRecognition::Gesture > * SWIGSTDCALL CSharp_EfficiofNet_DiscreteGesture_SWIGSmartPtrUpcast___(std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > *jarg1) {
    return jarg1 ? new std::shared_ptr< Efficio::InputRecognition::Gesture >(*jarg1) : 0;
}

SWIGEXPORT std::shared_ptr< Efficio::InputRecognition::DiscreteGesture > * SWIGSTDCALL CSharp_EfficiofNet_Pinch_SWIGSmartPtrUpcast___(std::shared_ptr< Efficio::InputRecognition::Body::Hands::Pinch > *jarg1) {
    return jarg1 ? new std::shared_ptr< Efficio::InputRecognition::DiscreteGesture >(*jarg1) : 0;
}

#ifdef __cplusplus
}
#endif

